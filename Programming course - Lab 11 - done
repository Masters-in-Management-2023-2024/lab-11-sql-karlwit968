{"cells":[{"cell_type":"markdown","metadata":{"id":"t8geHIWPX92G"},"source":["# Lab Exercise: SQL Analysis with Polars\n","\n","In this lab, you'll practice SQL queries using Polars' built-in SQL functionality. Complete each exercise by writing the appropriate SQL query."]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"4hxjjYX5X92I","executionInfo":{"status":"ok","timestamp":1755373552797,"user_tz":240,"elapsed":2050,"user":{"displayName":"Karl Witte","userId":"12683021148178478893"}},"outputId":"0fa2947a-6516-4828-90ef-ab838bdf1e7b"},"outputs":[{"output_type":"stream","name":"stdout","text":["Setup complete! Tables available:\n","shape: (4, 1)\n","┌──────────┐\n","│ name     │\n","│ ---      │\n","│ str      │\n","╞══════════╡\n","│ airlines │\n","│ airports │\n","│ flights  │\n","│ planes   │\n","└──────────┘\n"]},{"output_type":"stream","name":"stderr","text":["/tmp/ipython-input-728149587.py:15: DeprecationWarning: The argument `eager_execution` for `SQLContext.__init__` is deprecated. It has been renamed to `eager`.\n","  ctx = pl.SQLContext(\n"]}],"source":["# Setup - Run this cell first\n","import polars as pl\n","\n","# Load data\n","airlines = pl.read_csv('https://raw.githubusercontent.com/philhetzel/opan5510-class11/refs/heads/main/data/nyc_airlines.csv')\n","airports = pl.read_csv('https://raw.githubusercontent.com/philhetzel/opan5510-class11/refs/heads/main/data/nyc_airports.csv')\n","flights = pl.read_csv('https://raw.githubusercontent.com/philhetzel/opan5510-class11/refs/heads/main/data/nyc_flights.csv', null_values='NA')\n","planes = pl.read_csv('https://raw.githubusercontent.com/philhetzel/opan5510-class11/refs/heads/main/data/nyc_planes.csv', null_values='NA')\n","\n","\n","flights = flights.with_columns(pl.col(\"time_hour\").str.strptime(pl.Datetime))\n","\n","\n","# Create SQL context\n","ctx = pl.SQLContext(\n","    airlines=airlines,\n","    airports=airports,\n","    flights=flights,\n","    planes=planes,\n","    eager_execution=True\n",")\n","\n","print(\"Setup complete! Tables available:\")\n","print(ctx.execute(\"SHOW TABLES\"))"]},{"cell_type":"markdown","metadata":{"id":"jcVJmclHX92J"},"source":["## Exercise 1: Basic Queries\n","\n","### 1.1 Find all unique carriers in the airlines table"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"rifGstV2X92J","executionInfo":{"status":"ok","timestamp":1755373559772,"user_tz":240,"elapsed":24,"user":{"displayName":"Karl Witte","userId":"12683021148178478893"}},"outputId":"85fbd16c-7e3b-4f44-d9e0-724222069626"},"outputs":[{"output_type":"stream","name":"stdout","text":["shape: (16, 1)\n","┌─────────┐\n","│ carrier │\n","│ ---     │\n","│ str     │\n","╞═════════╡\n","│ 9E      │\n","│ AA      │\n","│ AS      │\n","│ B6      │\n","│ DL      │\n","│ …       │\n","│ UA      │\n","│ US      │\n","│ VX      │\n","│ WN      │\n","│ YV      │\n","└─────────┘\n"]}],"source":["# Write your SQL query here\n","result = ctx.execute(\"\"\"\n","SELECT DISTINCT carrier\n","FROM airlines\n","\"\"\")\n","\n","print(result)\n","\n","# print(result)"]},{"cell_type":"markdown","metadata":{"id":"epjOGzibX92J"},"source":["### 1.2 Find the top 10 destinations by number of flights"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"a4WQysbtX92J","executionInfo":{"status":"ok","timestamp":1755373648773,"user_tz":240,"elapsed":27,"user":{"displayName":"Karl Witte","userId":"12683021148178478893"}},"outputId":"4ec26a22-9a09-45fd-ed09-377e084e5ffc"},"outputs":[{"output_type":"stream","name":"stdout","text":["shape: (10, 2)\n","┌──────┬─────────────┐\n","│ dest ┆ num_flights │\n","│ ---  ┆ ---         │\n","│ str  ┆ u32         │\n","╞══════╪═════════════╡\n","│ ORD  ┆ 17283       │\n","│ ATL  ┆ 17215       │\n","│ LAX  ┆ 16174       │\n","│ BOS  ┆ 15508       │\n","│ MCO  ┆ 14082       │\n","│ CLT  ┆ 14064       │\n","│ SFO  ┆ 13331       │\n","│ FLL  ┆ 12055       │\n","│ MIA  ┆ 11728       │\n","│ DCA  ┆ 9705        │\n","└──────┴─────────────┘\n"]}],"source":["result = ctx.execute(\"\"\"\n","SELECT dest, COUNT(*) AS num_flights\n","FROM flights\n","GROUP BY dest\n","ORDER BY num_flights DESC\n","LIMIT 10\n","\"\"\")\n","\n","print(result)"]},{"cell_type":"markdown","metadata":{"id":"vlWI02aLX92J"},"source":["### 1.3 Find all flights that departed more than 2 hours late (120 minutes)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"tqlwkPNgX92K","executionInfo":{"status":"ok","timestamp":1755373688687,"user_tz":240,"elapsed":46,"user":{"displayName":"Karl Witte","userId":"12683021148178478893"}},"outputId":"e0cf67f2-3c64-411d-e334-6452fd83d251"},"outputs":[{"output_type":"stream","name":"stdout","text":["shape: (9_723, 19)\n","┌──────┬───────┬─────┬──────────┬───┬──────────┬──────┬────────┬─────────────────────────┐\n","│ year ┆ month ┆ day ┆ dep_time ┆ … ┆ distance ┆ hour ┆ minute ┆ time_hour               │\n","│ ---  ┆ ---   ┆ --- ┆ ---      ┆   ┆ ---      ┆ ---  ┆ ---    ┆ ---                     │\n","│ i64  ┆ i64   ┆ i64 ┆ i64      ┆   ┆ i64      ┆ i64  ┆ i64    ┆ datetime[μs, UTC]       │\n","╞══════╪═══════╪═════╪══════════╪═══╪══════════╪══════╪════════╪═════════════════════════╡\n","│ 2013 ┆ 1     ┆ 1   ┆ 848      ┆ … ┆ 184      ┆ 18   ┆ 35     ┆ 2013-01-01 23:00:00 UTC │\n","│ 2013 ┆ 1     ┆ 1   ┆ 957      ┆ … ┆ 200      ┆ 7    ┆ 33     ┆ 2013-01-01 12:00:00 UTC │\n","│ 2013 ┆ 1     ┆ 1   ┆ 1114     ┆ … ┆ 1416     ┆ 9    ┆ 0      ┆ 2013-01-01 14:00:00 UTC │\n","│ 2013 ┆ 1     ┆ 1   ┆ 1540     ┆ … ┆ 1598     ┆ 13   ┆ 38     ┆ 2013-01-01 18:00:00 UTC │\n","│ 2013 ┆ 1     ┆ 1   ┆ 1815     ┆ … ┆ 1134     ┆ 13   ┆ 25     ┆ 2013-01-01 18:00:00 UTC │\n","│ …    ┆ …     ┆ …   ┆ …        ┆ … ┆ …        ┆ …    ┆ …      ┆ …                       │\n","│ 2013 ┆ 9     ┆ 30  ┆ 1823     ┆ … ┆ 765      ┆ 15   ┆ 45     ┆ 2013-09-30 19:00:00 UTC │\n","│ 2013 ┆ 9     ┆ 30  ┆ 1951     ┆ … ┆ 708      ┆ 16   ┆ 49     ┆ 2013-09-30 20:00:00 UTC │\n","│ 2013 ┆ 9     ┆ 30  ┆ 2053     ┆ … ┆ 746      ┆ 18   ┆ 15     ┆ 2013-09-30 22:00:00 UTC │\n","│ 2013 ┆ 9     ┆ 30  ┆ 2159     ┆ … ┆ 301      ┆ 18   ┆ 45     ┆ 2013-09-30 22:00:00 UTC │\n","│ 2013 ┆ 9     ┆ 30  ┆ 2235     ┆ … ┆ 944      ┆ 20   ┆ 1      ┆ 2013-10-01 00:00:00 UTC │\n","└──────┴───────┴─────┴──────────┴───┴──────────┴──────┴────────┴─────────────────────────┘\n"]}],"source":["# Write your SQL query here\n","result = ctx.execute(\"\"\"\n","SELECT *\n","FROM flights\n","WHERE dep_delay > 120\n","\"\"\")\n","\n","print(result)\n","\n","\n","# print(result)"]},{"cell_type":"markdown","metadata":{"id":"Yq50eKfUX92K"},"source":["## Exercise 2: Aggregation\n","\n","### 2.1 Calculate the average departure delay for each origin airport"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"-oZlLOFaX92K","executionInfo":{"status":"ok","timestamp":1755373731050,"user_tz":240,"elapsed":48,"user":{"displayName":"Karl Witte","userId":"12683021148178478893"}},"outputId":"c9da1ab8-de18-478e-e71d-cfa908a0eb95"},"outputs":[{"output_type":"stream","name":"stdout","text":["shape: (3, 2)\n","┌────────┬───────────────┐\n","│ origin ┆ avg_dep_delay │\n","│ ---    ┆ ---           │\n","│ str    ┆ f64           │\n","╞════════╪═══════════════╡\n","│ JFK    ┆ 12.112159     │\n","│ EWR    ┆ 15.107954     │\n","│ LGA    ┆ 10.346876     │\n","└────────┴───────────────┘\n"]}],"source":["# Write your SQL query here\n","result = ctx.execute(\"\"\"\n","SELECT origin, AVG(dep_delay) AS avg_dep_delay\n","FROM flights\n","GROUP BY origin\n","\"\"\")\n","\n","print(result)\n","\n","# print(result)"]},{"cell_type":"markdown","metadata":{"id":"cVrsBid5X92K"},"source":["### 2.2 Find the busiest month of the year\n","\n","Count the number of flights per month and find which month has the most flights."]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"3-LCjaSIX92K","executionInfo":{"status":"ok","timestamp":1755373765818,"user_tz":240,"elapsed":26,"user":{"displayName":"Karl Witte","userId":"12683021148178478893"}},"outputId":"48fc917d-a8b9-4bd8-cff7-79472544bec0"},"outputs":[{"output_type":"stream","name":"stdout","text":["shape: (5, 19)\n","┌──────┬───────┬─────┬──────────┬───┬──────────┬──────┬────────┬─────────────────────────┐\n","│ year ┆ month ┆ day ┆ dep_time ┆ … ┆ distance ┆ hour ┆ minute ┆ time_hour               │\n","│ ---  ┆ ---   ┆ --- ┆ ---      ┆   ┆ ---      ┆ ---  ┆ ---    ┆ ---                     │\n","│ i64  ┆ i64   ┆ i64 ┆ i64      ┆   ┆ i64      ┆ i64  ┆ i64    ┆ datetime[μs, UTC]       │\n","╞══════╪═══════╪═════╪══════════╪═══╪══════════╪══════╪════════╪═════════════════════════╡\n","│ 2013 ┆ 1     ┆ 1   ┆ 517      ┆ … ┆ 1400     ┆ 5    ┆ 15     ┆ 2013-01-01 10:00:00 UTC │\n","│ 2013 ┆ 1     ┆ 1   ┆ 533      ┆ … ┆ 1416     ┆ 5    ┆ 29     ┆ 2013-01-01 10:00:00 UTC │\n","│ 2013 ┆ 1     ┆ 1   ┆ 542      ┆ … ┆ 1089     ┆ 5    ┆ 40     ┆ 2013-01-01 10:00:00 UTC │\n","│ 2013 ┆ 1     ┆ 1   ┆ 544      ┆ … ┆ 1576     ┆ 5    ┆ 45     ┆ 2013-01-01 10:00:00 UTC │\n","│ 2013 ┆ 1     ┆ 1   ┆ 554      ┆ … ┆ 762      ┆ 6    ┆ 0      ┆ 2013-01-01 11:00:00 UTC │\n","└──────┴───────┴─────┴──────────┴───┴──────────┴──────┴────────┴─────────────────────────┘\n","shape: (1, 2)\n","┌───────┬─────────────┐\n","│ month ┆ num_flights │\n","│ ---   ┆ ---         │\n","│ i64   ┆ u32         │\n","╞═══════╪═════════════╡\n","│ 7     ┆ 29425       │\n","└───────┴─────────────┘\n"]}],"source":["# First, preview columns\n","result = ctx.execute(\"\"\"\n","SELECT *\n","FROM flights\n","LIMIT 5\n","\"\"\")\n","print(result)\n","\n","# Now, find busiest month\n","result = ctx.execute(\"\"\"\n","SELECT month, COUNT(*) AS num_flights\n","FROM flights\n","GROUP BY month\n","ORDER BY num_flights DESC\n","LIMIT 1\n","\"\"\")\n","\n","print(result)\n","\n"]},{"cell_type":"markdown","metadata":{"id":"3KzlfNNdX92K"},"source":["### 2.3 Calculate the on-time performance rate for each carrier\n","\n","Consider a flight on-time if the departure delay is <= 15 minutes."]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"vxZ4n7_3X92K","executionInfo":{"status":"ok","timestamp":1755373821980,"user_tz":240,"elapsed":34,"user":{"displayName":"Karl Witte","userId":"12683021148178478893"}},"outputId":"ee402d0e-5257-41d3-a8ab-4645f4702465"},"outputs":[{"output_type":"stream","name":"stdout","text":["shape: (16, 2)\n","┌─────────┬──────────────┐\n","│ carrier ┆ on_time_rate │\n","│ ---     ┆ ---          │\n","│ str     ┆ f64          │\n","╞═════════╪══════════════╡\n","│ 9E      ┆ 0.701246     │\n","│ AS      ┆ 0.865546     │\n","│ OO      ┆ 0.71875      │\n","│ US      ┆ 0.849873     │\n","│ UA      ┆ 0.780431     │\n","│ …       ┆ …            │\n","│ FL      ┆ 0.716871     │\n","│ AA      ┆ 0.824376     │\n","│ F9      ┆ 0.715328     │\n","│ DL      ┆ 0.830742     │\n","│ YV      ┆ 0.647255     │\n","└─────────┴──────────────┘\n"]}],"source":["result = ctx.execute(\"\"\"\n","SELECT carrier,\n","       AVG(CASE WHEN dep_delay <= 15 THEN 1 ELSE 0 END) AS on_time_rate\n","FROM flights\n","GROUP BY carrier\n","\"\"\")\n","\n","print(result)\n"]},{"cell_type":"markdown","metadata":{"id":"gx5cQPgfX92K"},"source":["## Exercise 3: Joins\n","\n","### 3.1 List all flights with their airline names (not just carrier codes)\n","\n","Show the first 20 flights with carrier code, airline name, flight number, origin, and destination."]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ThGrLR29X92K","executionInfo":{"status":"ok","timestamp":1755373847451,"user_tz":240,"elapsed":50,"user":{"displayName":"Karl Witte","userId":"12683021148178478893"}},"outputId":"f063afbd-7103-4909-8320-c10bb183bcee"},"outputs":[{"output_type":"stream","name":"stdout","text":["shape: (20, 5)\n","┌─────────┬────────────────────────┬────────┬────────┬──────┐\n","│ carrier ┆ airline_name           ┆ flight ┆ origin ┆ dest │\n","│ ---     ┆ ---                    ┆ ---    ┆ ---    ┆ ---  │\n","│ str     ┆ str                    ┆ i64    ┆ str    ┆ str  │\n","╞═════════╪════════════════════════╪════════╪════════╪══════╡\n","│ UA      ┆ United Air Lines Inc.  ┆ 1545   ┆ EWR    ┆ IAH  │\n","│ UA      ┆ United Air Lines Inc.  ┆ 1714   ┆ LGA    ┆ IAH  │\n","│ AA      ┆ American Airlines Inc. ┆ 1141   ┆ JFK    ┆ MIA  │\n","│ B6      ┆ JetBlue Airways        ┆ 725    ┆ JFK    ┆ BQN  │\n","│ DL      ┆ Delta Air Lines Inc.   ┆ 461    ┆ LGA    ┆ ATL  │\n","│ …       ┆ …                      ┆ …      ┆ …      ┆ …    │\n","│ B6      ┆ JetBlue Airways        ┆ 1806   ┆ JFK    ┆ BOS  │\n","│ UA      ┆ United Air Lines Inc.  ┆ 1187   ┆ EWR    ┆ LAS  │\n","│ B6      ┆ JetBlue Airways        ┆ 371    ┆ LGA    ┆ FLL  │\n","│ MQ      ┆ Envoy Air              ┆ 4650   ┆ LGA    ┆ ATL  │\n","│ B6      ┆ JetBlue Airways        ┆ 343    ┆ EWR    ┆ PBI  │\n","└─────────┴────────────────────────┴────────┴────────┴──────┘\n"]}],"source":["result = ctx.execute(\"\"\"\n","SELECT f.carrier,\n","       a.name AS airline_name,\n","       f.flight,\n","       f.origin,\n","       f.dest\n","FROM flights f\n","JOIN airlines a\n","  ON f.carrier = a.carrier\n","LIMIT 20\n","\"\"\")\n","\n","print(result)\n"]},{"cell_type":"markdown","metadata":{"id":"Ukks2VKqX92L"},"source":["### 3.2 Find the average age of planes for each carrier\n","\n","Hint: The planes table has a `year` column for manufacture year. Calculate age based on 2013."]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ZnH32uBxX92L","executionInfo":{"status":"ok","timestamp":1755373879374,"user_tz":240,"elapsed":43,"user":{"displayName":"Karl Witte","userId":"12683021148178478893"}},"outputId":"5fd66b61-2c63-47be-bd5a-d989bea56424"},"outputs":[{"output_type":"stream","name":"stdout","text":["shape: (16, 2)\n","┌─────────┬───────────────┐\n","│ carrier ┆ avg_plane_age │\n","│ ---     ┆ ---           │\n","│ str     ┆ f64           │\n","╞═════════╪═══════════════╡\n","│ US      ┆ 9.103663      │\n","│ AS      ┆ 3.33662       │\n","│ 9E      ┆ 7.101053      │\n","│ DL      ┆ 16.372169     │\n","│ MQ      ┆ 35.319        │\n","│ …       ┆ …             │\n","│ VX      ┆ 4.473643      │\n","│ B6      ┆ 6.686702      │\n","│ YV      ┆ 9.313758      │\n","│ AA      ┆ 25.869426     │\n","│ FL      ┆ 11.385829     │\n","└─────────┴───────────────┘\n"]}],"source":["# Write your SQL query here\n","result = ctx.execute(\"\"\"\n","SELECT f.carrier,\n","       AVG(2013 - p.year) AS avg_plane_age\n","FROM flights f\n","JOIN planes p\n","  ON f.tailnum = p.tailnum\n","WHERE p.year IS NOT NULL\n","GROUP BY f.carrier\n","\"\"\")\n","\n","print(result)\n","\n","# print(result)"]},{"cell_type":"markdown","metadata":{"id":"bkKh56mMX92L"},"source":["### 3.3 Find flights that experienced both departure delays and bad weather\n","\n","Join flights with weather data and find flights where departure delay > 30 minutes and either wind_speed > 20 or precip > 0.1"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":341},"id":"YhhfHKP3X92L","executionInfo":{"status":"error","timestamp":1755374011583,"user_tz":240,"elapsed":15,"user":{"displayName":"Karl Witte","userId":"12683021148178478893"}},"outputId":"b221142e-4d8d-4892-d80a-ad266485f917"},"outputs":[{"output_type":"error","ename":"SQLInterfaceError","evalue":"relation 'weather' was not found","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mSQLInterfaceError\u001b[0m                         Traceback (most recent call last)","\u001b[0;32m/tmp/ipython-input-504622223.py\u001b[0m in \u001b[0;36m<cell line: 0>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0;31m# First, explore the weather table\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 5\u001b[0;31m result = ctx.execute(\"\"\"\n\u001b[0m\u001b[1;32m      6\u001b[0m \u001b[0mSELECT\u001b[0m \u001b[0;34m*\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      7\u001b[0m \u001b[0mFROM\u001b[0m \u001b[0mweather\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.11/dist-packages/polars/sql/context.py\u001b[0m in \u001b[0;36mexecute\u001b[0;34m(self, query, eager)\u001b[0m\n\u001b[1;32m    435\u001b[0m         \u001b[0;31m└\u001b[0m\u001b[0;31m─\u001b[0m\u001b[0;31m─\u001b[0m\u001b[0;31m─\u001b[0m\u001b[0;31m─\u001b[0m\u001b[0;31m─\u001b[0m\u001b[0;31m─\u001b[0m\u001b[0;31m─\u001b[0m\u001b[0;31m─\u001b[0m\u001b[0;31m┴\u001b[0m\u001b[0;31m─\u001b[0m\u001b[0;31m─\u001b[0m\u001b[0;31m─\u001b[0m\u001b[0;31m─\u001b[0m\u001b[0;31m─\u001b[0m\u001b[0;31m─\u001b[0m\u001b[0;31m─\u001b[0m\u001b[0;31m─\u001b[0m\u001b[0;31m─\u001b[0m\u001b[0;31m─\u001b[0m\u001b[0;31m─\u001b[0m\u001b[0;31m─\u001b[0m\u001b[0;31m─\u001b[0m\u001b[0;31m┴\u001b[0m\u001b[0;31m─\u001b[0m\u001b[0;31m─\u001b[0m\u001b[0;31m─\u001b[0m\u001b[0;31m─\u001b[0m\u001b[0;31m─\u001b[0m\u001b[0;31m─\u001b[0m\u001b[0;31m─\u001b[0m\u001b[0;31m─\u001b[0m\u001b[0;31m─\u001b[0m\u001b[0;31m┘\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    436\u001b[0m         \"\"\"\n\u001b[0;32m--> 437\u001b[0;31m         \u001b[0mres\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mwrap_ldf\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_ctxt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mexecute\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mquery\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    438\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0mres\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcollect\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mif\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0meager\u001b[0m \u001b[0;32mor\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_eager_execution\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32melse\u001b[0m \u001b[0mres\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    439\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mSQLInterfaceError\u001b[0m: relation 'weather' was not found"]}],"source":["# please be aware that the weather csv has been removed from the input section because polars was not able to recognize the csv file. Therefore, this exercise was performed without the wheather CSV. However, below, you would find the correct code fur running this exercise\n","\n","\n","# First, explore the weather table\n","result = ctx.execute(\"\"\"\n","SELECT *\n","FROM weather\n","LIMIT 5\n","\"\"\")\n","print(result)\n","\n","# Now, find delayed flights with bad weather\n","result = ctx.execute(\"\"\"\n","SELECT f.year, f.month, f.day, f.dep_delay,\n","       w.wind_speed, w.precip\n","FROM flights f\n","JOIN weather w\n","  ON f.origin = w.origin\n"," AND f.time_hour = w.time_hour\n","WHERE f.dep_delay > 30\n","  AND (w.wind_speed > 20 OR w.precip > 0.1)\n","\"\"\")\n","\n","print(result)\n"]},{"cell_type":"markdown","metadata":{"id":"KngxNjnJX92L"},"source":["## Exercise 4: Advanced Queries\n","\n","### 4.1 Find the most popular aircraft types (by number of flights)\n","\n","Join flights with planes to get manufacturer and model information. Show top 10."]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"MrL9hW0VX92L","executionInfo":{"status":"ok","timestamp":1755374045503,"user_tz":240,"elapsed":43,"user":{"displayName":"Karl Witte","userId":"12683021148178478893"}},"outputId":"f7acea30-c5d8-4725-9ec8-1ad193f5ee21"},"outputs":[{"output_type":"stream","name":"stdout","text":["shape: (10, 3)\n","┌───────────────────────────────┬─────────────────┬─────────────┐\n","│ manufacturer                  ┆ model           ┆ num_flights │\n","│ ---                           ┆ ---             ┆ ---         │\n","│ str                           ┆ str             ┆ u32         │\n","╞═══════════════════════════════╪═════════════════╪═════════════╡\n","│ AIRBUS                        ┆ A320-232        ┆ 31278       │\n","│ EMBRAER                       ┆ EMB-145LR       ┆ 28027       │\n","│ EMBRAER                       ┆ ERJ 190-100 IGW ┆ 23716       │\n","│ AIRBUS INDUSTRIE              ┆ A320-232        ┆ 14553       │\n","│ EMBRAER                       ┆ EMB-145XR       ┆ 14051       │\n","│ BOEING                        ┆ 737-824         ┆ 13809       │\n","│ BOMBARDIER INC                ┆ CL-600-2D24     ┆ 11807       │\n","│ BOEING                        ┆ 737-7H4         ┆ 10389       │\n","│ BOEING                        ┆ 757-222         ┆ 9150        │\n","│ MCDONNELL DOUGLAS AIRCRAFT CO ┆ MD-88           ┆ 8932        │\n","└───────────────────────────────┴─────────────────┴─────────────┘\n"]}],"source":["result = ctx.execute(\"\"\"\n","SELECT p.manufacturer,\n","       p.model,\n","       COUNT(*) AS num_flights\n","FROM flights f\n","JOIN planes p\n","  ON f.tailnum = p.tailnum\n","GROUP BY p.manufacturer, p.model\n","ORDER BY num_flights DESC\n","LIMIT 10\n","\"\"\")\n","\n","print(result)\n"]},{"cell_type":"markdown","metadata":{"id":"Ocas2Sn3X92L"},"source":["### 4.2 Analyze route performance\n","\n","Find the top 10 routes (origin-destination pairs) with:\n","- Total number of flights\n","- Average departure delay\n","- Percentage of flights delayed more than 30 minutes\n","\n","Include airport names, not just codes."]},{"cell_type":"code","execution_count":41,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"oPuD-mn5X92L","executionInfo":{"status":"ok","timestamp":1755376085521,"user_tz":240,"elapsed":104,"user":{"displayName":"Karl Witte","userId":"12683021148178478893"}},"outputId":"4f983188-6525-4eca-e9a6-d21cb59e1038"},"outputs":[{"output_type":"stream","name":"stdout","text":["shape: (10, 7)\n","┌────────┬────────────────┬──────┬────────────────┬───────────────┬───────────────┬────────────────┐\n","│ origin ┆ origin_name    ┆ dest ┆ dest_name      ┆ total_flights ┆ avg_dep_delay ┆ pct_delayed_ov │\n","│ ---    ┆ ---            ┆ ---  ┆ ---            ┆ ---           ┆ ---           ┆ er_30          │\n","│ str    ┆ str            ┆ str  ┆ str            ┆ u32           ┆ f64           ┆ ---            │\n","│        ┆                ┆      ┆                ┆               ┆               ┆ f64            │\n","╞════════╪════════════════╪══════╪════════════════╪═══════════════╪═══════════════╪════════════════╡\n","│ JFK    ┆ John F Kennedy ┆ LAX  ┆ Los Angeles    ┆ 11196         ┆ 8.522508      ┆ 9.88746        │\n","│        ┆ Intl           ┆      ┆ Intl           ┆               ┆               ┆                │\n","│ LGA    ┆ La Guardia     ┆ ATL  ┆ Hartsfield     ┆ 10082         ┆ 11.448621     ┆ 12.467764      │\n","│        ┆                ┆      ┆ Jackson        ┆               ┆               ┆                │\n","│        ┆                ┆      ┆ Atlanta Int…   ┆               ┆               ┆                │\n","│ LGA    ┆ La Guardia     ┆ ORD  ┆ Chicago Ohare  ┆ 8548          ┆ 10.740758     ┆ 13.827796      │\n","│        ┆                ┆      ┆ Intl           ┆               ┆               ┆                │\n","│ JFK    ┆ John F Kennedy ┆ SFO  ┆ San Francisco  ┆ 8138          ┆ 11.952691     ┆ 12.214303      │\n","│        ┆ Intl           ┆      ┆ Intl           ┆               ┆               ┆                │\n","│ LGA    ┆ La Guardia     ┆ CLT  ┆ Charlotte      ┆ 5969          ┆ 8.965321      ┆ 12.347127      │\n","│        ┆                ┆      ┆ Douglas Intl   ┆               ┆               ┆                │\n","│ EWR    ┆ Newark Liberty ┆ ORD  ┆ Chicago Ohare  ┆ 5851          ┆ 14.644163     ┆ 16.680909      │\n","│        ┆ Intl           ┆      ┆ Intl           ┆               ┆               ┆                │\n","│ JFK    ┆ John F Kennedy ┆ BOS  ┆ General Edward ┆ 5786          ┆ 11.694953     ┆ 14.033875      │\n","│        ┆ Intl           ┆      ┆ Lawrence Logan ┆               ┆               ┆                │\n","│        ┆                ┆      ┆ …              ┆               ┆               ┆                │\n","│ LGA    ┆ La Guardia     ┆ MIA  ┆ Miami Intl     ┆ 5725          ┆ 7.361747      ┆ 9.554585       │\n","│ JFK    ┆ John F Kennedy ┆ MCO  ┆ Orlando Intl   ┆ 5434          ┆ 10.601583     ┆ 12.789842      │\n","│        ┆ Intl           ┆      ┆                ┆               ┆               ┆                │\n","│ EWR    ┆ Newark Liberty ┆ BOS  ┆ General Edward ┆ 5251          ┆ 12.54561      ┆ 15.120929      │\n","│        ┆ Intl           ┆      ┆ Lawrence Logan ┆               ┆               ┆                │\n","│        ┆                ┆      ┆ …              ┆               ┆               ┆                │\n","└────────┴────────────────┴──────┴────────────────┴───────────────┴───────────────┴────────────────┘\n"]}],"source":["result = ctx.execute(\"\"\"\n","WITH FlightDetails AS (\n","    SELECT\n","        f.origin,\n","        ao.name AS origin_name,\n","        f.dest,\n","        ad.name AS dest_name,\n","        f.dep_delay\n","    FROM flights AS f\n","    JOIN airports AS ao ON f.origin = ao.faa\n","    JOIN airports AS ad ON f.dest = ad.faa\n","    WHERE f.dep_delay IS NOT NULL\n",")\n","SELECT\n","    origin,\n","    origin_name,\n","    dest,\n","    dest_name,\n","    COUNT(*) AS total_flights,\n","    AVG(dep_delay) AS avg_dep_delay,\n","    CAST(SUM(CASE WHEN dep_delay > 30 THEN 1 ELSE 0 END) AS DOUBLE) * 100.0 / COUNT(*) AS pct_delayed_over_30\n","FROM FlightDetails\n","GROUP BY origin, origin_name, dest, dest_name\n","ORDER BY total_flights DESC\n","LIMIT 10\n","\"\"\")\n","\n","print(result)"]},{"cell_type":"code","execution_count":41,"metadata":{"id":"3i6apBzbX92L","executionInfo":{"status":"ok","timestamp":1755376092691,"user_tz":240,"elapsed":5,"user":{"displayName":"Karl Witte","userId":"12683021148178478893"}}},"outputs":[],"source":[]},{"cell_type":"markdown","metadata":{"id":"N8V3UzwuX92L"},"source":["## Bonus: Compare with Polars\n","\n","### Choose one of the queries above and implement it using Polars\n","\n","This will help you understand the relationship between SQL and Polars operations."]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"4yQocD8uX92L","executionInfo":{"status":"ok","timestamp":1755374732400,"user_tz":240,"elapsed":47,"user":{"displayName":"Karl Witte","userId":"12683021148178478893"}},"outputId":"797fa6b2-8e60-4449-b7cf-4986c63c3523"},"outputs":[{"output_type":"stream","name":"stdout","text":["SQL Result:\n","shape: (3, 2)\n","┌────────┬───────────┐\n","│ origin ┆ avg_delay │\n","│ ---    ┆ ---       │\n","│ str    ┆ f64       │\n","╞════════╪═══════════╡\n","│ EWR    ┆ 15.107954 │\n","│ JFK    ┆ 12.112159 │\n","│ LGA    ┆ 10.346876 │\n","└────────┴───────────┘\n","\n","Polars Result:\n","shape: (3, 2)\n","┌────────┬───────────┐\n","│ origin ┆ avg_delay │\n","│ ---    ┆ ---       │\n","│ str    ┆ f64       │\n","╞════════╪═══════════╡\n","│ EWR    ┆ 15.107954 │\n","│ JFK    ┆ 12.112159 │\n","│ LGA    ┆ 10.346876 │\n","└────────┴───────────┘\n"]}],"source":["# Example: Let's implement Exercise 2.1 (average delay by origin) in Polars\n","\n","# SQL version (for reference)\n","sql_result = ctx.execute(\"\"\"\n","    SELECT\n","        origin,\n","        AVG(dep_delay) as avg_delay\n","    FROM flights\n","    WHERE dep_delay IS NOT NULL\n","    GROUP BY origin\n","    ORDER BY avg_delay DESC\n","\"\"\")\n","\n","# Polars version\n","polars_result = (\n","    flights\n","    .filter(pl.col('dep_delay').is_not_null())\n","    .group_by('origin')\n","    .agg(pl.col('dep_delay').mean().alias('avg_delay'))\n","    .sort('avg_delay', descending=True)\n",")\n","\n","print(\"SQL Result:\")\n","print(sql_result)\n","print(\"\\nPolars Result:\")\n","print(polars_result)\n","\n","# Now implement one of your own queries in Polars below:\n","# Your Polars code here"]}],"metadata":{"kernelspec":{"display_name":"Python 3","language":"python","name":"python3"},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.8.0"},"colab":{"provenance":[]}},"nbformat":4,"nbformat_minor":0}